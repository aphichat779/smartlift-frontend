// src/pages/AdminAssignTask.jsx
import React, { useEffect, useState } from "react";
import { tasksService } from "../../services/tasksService";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Select,
  SelectTrigger,
  SelectContent,
  SelectItem,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import {
  Table,
  TableHead,
  TableRow,
  TableHeader,
  TableBody,
  TableCell,
} from "@/components/ui/table";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

// Helper Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô Dialog
const DetailItem = ({ label, value, fullWidth = false }) => (
  <div className={`${fullWidth ? "col-span-2" : "col-span-1"} flex flex-col`}>
    <span className="text-xs font-medium text-gray-500">{label}</span>
    <span className="text-sm font-semibold text-gray-800 break-words">
      {value || <span className="text-gray-400">‚Äî</span>}
    </span>
  </div>
);

function AdminAssignTask() {
  const [reports, setReports] = useState([]);
  const [technicians, setTechnicians] = useState([]);
  const [loading, setLoading] = useState(false);

  // assign dialog
  const [showAssign, setShowAssign] = useState(false);
  const [selectedReport, setSelectedReport] = useState(null);
  const [selectedTech, setSelectedTech] = useState("");
  const [taskDetail, setTaskDetail] = useState("");
  const [startDate, setStartDate] = useState(""); // YYYY-MM-DD
  const [assignedBy, setAssignedBy] = useState(""); // auto from profile

  // detail dialog (‡πÉ‡∏´‡∏°‡πà)
  const [showDetail, setShowDetail] = useState(false);
  const [detailReport, setDetailReport] = useState(null);

  // create report dialog
  const [showCreateReport, setShowCreateReport] = useState(false);
  const [orgs, setOrgs] = useState([]);
  const [buildings, setBuildings] = useState([]);
  const [lifts, setLifts] = useState([]);
  const [newRp, setNewRp] = useState({
    date_rp: "",
    org_id: "",
    building_id: "",
    lift_id: "",
    detail: "",
  });

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏°‡∏≠‡∏ö‡∏à‡∏≤‡∏Å localStorage (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÉ‡∏ô UI)
  useEffect(() => {
    try {
      const raw = localStorage.getItem("profile") || localStorage.getItem("user");
      if (raw) {
        const p = JSON.parse(raw);
        const display =
          p?.first_name || p?.last_name
            ? `${p.first_name || ""} ${p.last_name || ""}`.trim()
            : p?.username || "";
        if (display) setAssignedBy(display);
      }
    } catch {}
  }, []);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≤‡∏á
  const fetchReports = async () => {
    try {
      setLoading(true);
      const res = await tasksService.reports();
      if (res?.success) setReports(res.data || []);
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const fetchTechnicians = async () => {
    try {
      const res = await tasksService.technicians();
      if (res?.success) setTechnicians(res.data || []);
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    fetchReports();
    fetchTechnicians();
  }, []);

  // =============== Assign Handlers ===============
  const handleAssign = async () => {
    if (!selectedReport || !selectedTech) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏™‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≤‡∏á");
      return;
    }
    try {
      const payload = {
        rp_id: selectedReport.rp_id,
        user_id: Number(selectedTech),
        tk_data: taskDetail,
        start_date: startDate || null, // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô
        assigned_by: assignedBy || "Unknown", // BE ‡∏à‡∏∞‡∏ï‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å token ‡πÄ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      };

      const res = await tasksService.assign(payload);

      if (res?.success) {
        alert("‚úÖ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        setShowAssign(false);
        setSelectedTech("");
        setTaskDetail("");
        setStartDate("");
        fetchReports(); // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î
      } else {
        alert("‚ùå " + (res?.message || "Assign failed"));
      }
    } catch (err) {
      console.error(err);
      alert("‚ùå Error assigning task");
    }
  };

  // =============== Detail Handler (‡πÉ‡∏´‡∏°‡πà) ===============
  const handleViewDetail = (report) => {
    setDetailReport(report);
    setShowDetail(true);
  };

  // =============== Create Report (popup) ===============
  const loadOrgs = async () => {
    try {
      const res = await tasksService.workOrgs();
      if (res?.success) setOrgs(res.data?.orgs || []);
    } catch (e) {
      console.error("load orgs failed", e);
    }
  };
  const loadBuildings = async (org_id) => {
    try {
      if (!org_id) {
        setBuildings([]);
        return;
      }
      const res = await tasksService.workBuildings(org_id);
      if (res?.success) setBuildings(res.data?.buildings || []);
    } catch (e) {
      console.error("load buildings failed", e);
    }
  };
  const loadLifts = async (building_id) => {
    try {
      if (!building_id) {
        setLifts([]);
        return;
      }
      const res = await tasksService.workLifts(building_id);
      if (res?.success) setLifts(res.data?.lifts || []);
    } catch (e) {
      console.error("load lifts failed", e);
    }
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î popup ‚Üí ‡πÇ‡∏´‡∏•‡∏î orgs + ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default ‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á
  useEffect(() => {
    if (!showCreateReport) return;
    loadOrgs();
    setNewRp((s) => ({
      ...s,
      date_rp: s.date_rp || new Date().toISOString().slice(0, 10),
    }));
  }, [showCreateReport]);

  // cascading: org -> buildings -> lifts
  useEffect(() => {
    setNewRp((s) => ({ ...s, building_id: "", lift_id: "" }));
    setBuildings([]);
    setLifts([]);
    if (newRp.org_id) loadBuildings(newRp.org_id);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [newRp.org_id]);

  useEffect(() => {
    setNewRp((s) => ({ ...s, lift_id: "" }));
    setLifts([]);
    if (newRp.building_id) loadLifts(newRp.building_id);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [newRp.building_id]);

  const handleCreateReport = async () => {
    try {
      const { date_rp, org_id, building_id, lift_id, detail } = newRp;
      if (!date_rp || !org_id || !building_id || !lift_id || !detail?.trim()) {
        alert("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£, ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£, ‡∏•‡∏¥‡∏ü‡∏ï‡πå, ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î");
        return;
      }
      const res = await tasksService.workCreateReport({
        date_rp,
        org_id: Number(org_id),
        building_id: Number(building_id),
        lift_id: Number(lift_id),
        detail: detail.trim(),
      });

      if (res?.success && res?.data?.rp_id) {
        const r = {
          rp_id: res.data.rp_id,
          date_rp: res.data.date_rp || date_rp,
          org_name: res?.data?.org_name,
          building_name: res?.data?.building_name,
          lift_name: res?.data?.lift_name,
          detail: res?.data?.detail || detail,
          assigned_count: 0,
          start_date: null,
          assigned_by: null,
        };
        setShowCreateReport(false);
        setNewRp({
          date_rp: "",
          org_id: "",
          building_id: "",
          lift_id: "",
          detail: "",
        });
        // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡πà‡∏≠
        setSelectedReport(r);
        setShowAssign(true);
      } else {
        alert("‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á Report ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    } catch (err) {
      console.error(err);
      alert("‚ùå Error creating report");
    }
  };

  return (
    <div className="p-6">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">üìã ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≤‡∏á</h1>
        <Button
          className="bg-emerald-600 hover:bg-emerald-700 text-white"
          onClick={() => setShowCreateReport(true)}
        >
          ‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        </Button>
      </div>

      <Card className="shadow-lg border">
        <CardHeader>
          <CardTitle>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <p className="text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
          ) : reports.length === 0 ? (
            <p className="text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°</p>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-[120px]">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</TableHead>
                  <TableHead>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</TableHead>
                  <TableHead>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏•‡∏¥‡∏ü‡∏ï‡πå</TableHead>
                  <TableHead>‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô</TableHead>
                  <TableHead>‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏î‡∏¢</TableHead>
                  <TableHead className="text-center">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableHead>
                  <TableHead className="text-center">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {reports.map((r) => (
                  <TableRow
                    key={r.rp_id}
                    // üëá ‡πÄ‡∏û‡∏¥‡πà‡∏° onClick ‡πÅ‡∏•‡∏∞ cursor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏î‡πâ
                    onClick={() => handleViewDetail(r)}
                    className="cursor-pointer hover:bg-gray-50"
                  >
                    <TableCell>{r.date_rp}</TableCell>
                    <TableCell className="max-w-[300px] truncate">
                      {r.detail}
                    </TableCell>
                    <TableCell>
                      <div className="font-medium">
                        {r.org_name} / {r.building_name}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {r.lift_name}
                      </div>
                    </TableCell>
                    <TableCell>
                      {r.start_date || <span className="text-gray-400">‚Äî</span>}
                    </TableCell>
                    <TableCell>
                      {r.assigned_by || <span className="text-gray-400">‚Äî</span>}
                    </TableCell>
                    <TableCell className="text-center">
                      {r.assigned_count > 0 ? (
                        <div className="flex flex-col items-center gap-1">
                          <Badge className="bg-emerald-100 text-emerald-700">
                            ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
                          </Badge>
                          <div className="text-xs text-gray-600">
                            {r.assigned_tech_name ||
                              r.technician_name ||
                              r.assigned_to ||
                              "‚Äî"}
                          </div>
                        </div>
                      ) : (
                        <Badge className="bg-amber-100 text-amber-700">
                          ‡∏£‡∏≠‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
                        </Badge>
                      )}
                    </TableCell>
                    <TableCell className="text-center">
                      <Button
                        size="sm"
                        className={`px-4 ${
                          r.assigned_count > 0
                            ? "bg-gray-200 text-gray-500 cursor-not-allowed"
                            : "bg-blue-600 hover:bg-blue-700 text-white shadow"
                        }`}
                        disabled={r.assigned_count > 0}
                        onClick={(e) => {
                          // üõë ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏´‡∏¢‡∏∏‡∏î event propagation ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡πÄ‡∏õ‡∏¥‡∏î Dialog ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                          e.stopPropagation();
                          setSelectedReport(r);
                          setShowAssign(true);
                        }}
                      >
                        ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>

      {/* Dialog ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ */}
      <Dialog open={showAssign} onOpenChange={setShowAssign}>
        <DialogContent className="max-w-lg">
          <DialogHeader>
            <DialogTitle>‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≤‡∏á</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="bg-gray-50 rounded-md p-3">
              <p className="text-sm text-gray-600">
                <strong>‡πÄ‡∏Ñ‡∏™:</strong> {selectedReport?.detail}
              </p>
              <p className="text-sm text-gray-600">
                <strong>‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£:</strong> {selectedReport?.org_name} /{" "}
                {selectedReport?.building_name}
              </p>
              <p className="text-sm text-gray-600">
                <strong>‡∏•‡∏¥‡∏ü‡∏ï‡πå:</strong> {selectedReport?.lift_name}
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≤‡∏á</label>
              <Select value={selectedTech} onValueChange={setSelectedTech}>
                <SelectTrigger>
                  <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≤‡∏á" />
                </SelectTrigger>
                <SelectContent>
                  {technicians.map((t) => (
                    <SelectItem key={t.id} value={t.id.toString()}>
                      {t.first_name} {t.last_name} ({t.username})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">
                ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô
              </label>
              <Input
                type="text"
                value={taskDetail}
                onChange={(e) => setTaskDetail(e.target.value)}
                placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">
                ‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô (‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
              </label>
              <Input
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
              />
              <p className="text-xs text-gray-500 mt-1">
                ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô <code>start_date</code> (DATE)
              </p>
            </div>

            <Button onClick={handleAssign} className="w-full">
              ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
            </Button>
          </div>
        </DialogContent>
      </Dialog>
      
      {/* --- Dialog ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡πÉ‡∏´‡∏°‡πà) --- */}
      <Dialog open={showDetail} onOpenChange={setShowDetail}>
        <DialogContent className="max-w-lg">
          <DialogHeader>
            <DialogTitle>üîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°</DialogTitle>
          </DialogHeader>
          {detailReport && (
            <div className="space-y-3 p-2">
              <div className="grid grid-cols-2 gap-3">
                <DetailItem label="Report ID" value={detailReport.rp_id} />
                <DetailItem label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á" value={detailReport.date_rp} />
              </div>
              <DetailItem label="‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£" value={detailReport.org_name} />
              <DetailItem label="‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£" value={detailReport.building_name} />
              <DetailItem label="‡∏•‡∏¥‡∏ü‡∏ï‡πå" value={detailReport.lift_name} />
              <DetailItem
                label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°"
                value={detailReport.detail}
                fullWidth
              />
              <div className="border-t pt-3 space-y-2">
                <p className="text-md font-semibold text-blue-700">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô</p>
                <DetailItem
                  label="‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
                  value={detailReport.start_date}
                />
                <DetailItem
                  label="‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏î‡∏¢"
                  value={detailReport.assigned_by}
                />
                {detailReport.assigned_count > 0 && (
                  <DetailItem
                    label="‡∏ä‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢"
                    value={
                      detailReport.assigned_tech_name ||
                      detailReport.technician_name ||
                      detailReport.assigned_to
                    }
                  />
                )}
              </div>
            </div>
          )}
          <Button onClick={() => setShowDetail(false)} className="w-full">
            ‡∏õ‡∏¥‡∏î
          </Button>
        </DialogContent>
      </Dialog>
      {/* --- END Dialog ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î --- */}


      {/* Dialog ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà */}
      <Dialog open={showCreateReport} onOpenChange={setShowCreateReport}>
        <DialogContent className="max-w-lg">
          <DialogHeader>
            <DialogTitle>‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏£‡πâ‡∏≤‡∏á Report)</DialogTitle>
          </DialogHeader>
          <div className="space-y-3">
            <div className="grid grid-cols-2 gap-3">
              <div>
                <label className="block text-sm font-medium mb-1">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á</label>
                <Input
                  type="date"
                  value={newRp.date_rp}
                  onChange={(e) =>
                    setNewRp({ ...newRp, date_rp: e.target.value })
                  }
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£</label>
                <Select
                  value={newRp.org_id?.toString() || ""}
                  onValueChange={(v) => setNewRp({ ...newRp, org_id: v })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£" />
                  </SelectTrigger>
                  <SelectContent>
                    {orgs.map((o) => (
                      <SelectItem key={o.id} value={o.id.toString()}>
                        {o.org_name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="col-span-1">
                <label className="block text-sm font-medium mb-1">‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£</label>
                <Select
                  value={newRp.building_id?.toString() || ""}
                  onValueChange={(v) => setNewRp({ ...newRp, building_id: v })}
                  disabled={!newRp.org_id}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£" />
                  </SelectTrigger>
                  <SelectContent>
                    {buildings.map((b) => (
                      <SelectItem key={b.id} value={b.id.toString()}>
                        {b.building_name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="col-span-1">
                <label className="block text-sm font-medium mb-1">‡∏•‡∏¥‡∏ü‡∏ï‡πå</label>
                <Select
                  value={newRp.lift_id?.toString() || ""}
                  onValueChange={(v) => setNewRp({ ...newRp, lift_id: v })}
                  disabled={!newRp.building_id}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏¥‡∏ü‡∏ï‡πå" />
                  </SelectTrigger>
                  <SelectContent>
                    {lifts.map((l) => (
                      <SelectItem key={l.id} value={l.id.toString()}>
                        {l.lift_name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label>
              <Input
                type="text"
                value={newRp.detail}
                onChange={(e) => setNewRp({ ...newRp, detail: e.target.value })}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏¥‡∏ó ‡∏ä‡∏≥‡∏£‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ä‡∏±‡πâ‡∏ô 7"
              />
            </div>

            <Button className="w-full" onClick={handleCreateReport}>
              üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á Report
            </Button>

            <p className="text-xs text-gray-500">
              ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            </p>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}

export default AdminAssignTask;