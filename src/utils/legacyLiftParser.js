// src/utils/legacyLiftParser.js

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (Hex String) ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * (‡πÉ‡∏ä‡πâ STATE1: ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ Hex 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å)
 * @param {string} statusString - ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÄ‡∏ä‡πà‡∏ô "0100..."
 * @returns {number} - ‡πÄ‡∏•‡∏Ç‡∏ä‡∏±‡πâ‡∏ô (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1)
 */
export function getCurrentLevel(statusString) {
  if (!statusString || statusString.length < 2) return 1;
  // STATE1 (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ 0-1) ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏ä‡∏±‡πâ‡∏ô (Hex)
  return parseInt(statusString.substring(0, 2), 16);
}

// ----------------------------------------------------------------------
// üí° ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ä‡∏±‡πâ‡∏ô: ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏ö‡∏ï‡πå (8 ‡∏ö‡∏¥‡∏ï‡∏ï‡πà‡∏≠‡πÑ‡∏ö‡∏ï‡πå)
// ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å 4 ‡πÑ‡∏ö‡∏ï‡πå (8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ Hex) ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô 1-32
// ----------------------------------------------------------------------

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏à‡∏≤‡∏Å up/down/car status)
 * @param {string} statusString - ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å (Hex String 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ = 4 ‡πÑ‡∏ö‡∏ï‡πå)
 * @param {number} level - ‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1)
 * @returns {boolean} - true ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
 */
export function checkLevel(statusString, level) {
  if (!statusString || level < 1) return false;

  // Byte Index 0-3 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô 1-32
  const byteIndex = Math.floor((level - 1) / 8); 
  // Bit Index 0-7 ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ö‡∏ï‡πå
  const bitIndex = (level - 1) % 8; ¬† ¬† ¬† ¬† ¬† ¬† ¬†

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 32 ‡∏ä‡∏±‡πâ‡∏ô / 4 ‡πÑ‡∏ö‡∏ï‡πå)
  if (byteIndex > 3 || statusString.length < (byteIndex * 2) + 2) {
    return false;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Hex 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (1 ‡πÑ‡∏ö‡∏ï‡πå)
  const start = byteIndex * 2;
  const hexValue = statusString.substring(start, start + 2);
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Bit Mask
  const value = parseInt(hexValue, 16);
  const mask = 1 << bitIndex;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  return (value & mask) !== 0;
}

// ----------------------------------------------------------------------

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏ï‡∏π
 * (‡πÉ‡∏ä‡πâ Bit 0-1 ‡∏Ç‡∏≠‡∏á STATE2)
 * @param {string} statusString - ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏Å
 * @returns {string} - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏ï‡∏π
 */
export function checkDoorText(statusString) {
  if (!statusString || statusString.length < 4) return "Unknown";
  // STATE2 (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ 2-3)
  const value = parseInt(statusString.substring(2, 4), 16);
  const doorStatus = value & 3; // Bit 0-1
  switch (doorStatus) {
    case 0: return "Opened"; 
    case 1: return "Closed";
    case 2: return "Closing";
    case 3: return "Opening";
    default: return "Opened";
  }
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
 * (‡πÉ‡∏ä‡πâ Bit 0-3 ‡∏Ç‡∏≠‡∏á STATE3)
 * @param {string} statusString - ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏Å
 * @returns {string} - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
 */
export function checkWorkingStatus(statusString) {
  if (!statusString || statusString.length < 6) return "Error";
  // STATE3 (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ 4-5)
  const value = parseInt(statusString.substring(4, 6), 16);
  const workingStatus = value & 15; // Bit 0-3
  switch (workingStatus) {
    case 0: return "Auto";
    case 1: return "INSP";
    case 2: return "Fire";
    case 3: return "Driving";
    case 4: return "Special";
    case 5: return "Learning";
    case 6: return "Lock";
    case 7: return "Reset";
    case 8: return "UPS";
    case 9: return "Idle";
    case 10: return "Break";
    case 11: return "Bypass";
    default: return "Error";
  }
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (m/s)
 * (‡πÉ‡∏ä‡πâ STATE5 + STATE6: ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ 8-11)
 * @param {string} statusString - ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏Å
 * @returns {number} - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (m/s)
 */
export function checkSpeed(statusString) {
  if (!statusString || statusString.length < 12) return 0;
  // STATE5 (High) + STATE6 (Low) ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ Hex
  const value = parseInt(statusString.substring(8, 12), 16); 
  // ‡πÅ‡∏õ‡∏•‡∏á: ‡∏Ñ‡πà‡∏≤ 16 ‡∏ö‡∏¥‡∏ï (mm/s) ‡πÄ‡∏õ‡πá‡∏ô m/s
  return (parseInt(value / 100) / 10); 
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
 * (‡πÉ‡∏ä‡πâ STATE4: ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ 6-7)
 * @param {string} statusString - ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏Å
 * @returns {number} - ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
 */
export function checkError(statusString) {
  if (!statusString || statusString.length < 8) return 0;
  // STATE4 (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ 6-7)
  return parseInt(statusString.substring(6, 8), 16);
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
 * (‡πÉ‡∏ä‡πâ Bit 6, 7 ‡∏Ç‡∏≠‡∏á STATE2)
 * @param {string} statusString - ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏Å
 * @returns {string|null} - 'UP', 'DOWN', ‡∏´‡∏£‡∏∑‡∏≠ null
 */
export function checkDirection(statusString) {
  if (!statusString || statusString.length < 4) return null;
  // STATE2 (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ 2-3)
  const value = parseInt(statusString.substring(2, 4), 16); 
  const upArrow = (value & 0x80) !== 0; // BIT 7
  const downArrow = (value & 0x40) !== 0; // BIT 6

  if (upArrow) return 'UP';
  if (downArrow) return 'DOWN';
  return null;
}